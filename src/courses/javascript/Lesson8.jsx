import React from 'react';
import CodeBlock from '../../components/SyntaxHighlighter';

const TipBox = ({ children }) => {
  return (
    <div className="bg-blue-50 border-l-4 border-blue-500 p-3 sm:p-4 my-4 sm:my-6 rounded-r-lg w-full overflow-x-hidden">
      <div className="flex flex-col sm:flex-row items-start">
        <div className="text-xl sm:text-2xl mb-2 sm:mb-0 sm:mr-2 lg:mr-3 flex-shrink-0">üí°</div>
        <div className="text-blue-800 text-sm sm:text-base break-words">{children}</div>
      </div>
    </div>
  );
};

const ExerciseBox = ({ children }) => {
  return (
    <div className="bg-yellow-50 border border-yellow-300 p-3 sm:p-4 lg:p-6 my-4 sm:my-6 lg:my-8 rounded-lg w-full overflow-x-hidden">
      <h3 className="text-base sm:text-lg lg:text-xl font-bold text-yellow-800 mb-2 sm:mb-3 lg:mb-4 flex items-center break-words">
        <span className="mr-2 text-lg sm:text-xl lg:text-2xl flex-shrink-0">üéØ</span>
        <span>Exercice</span>
      </h3>
      <div className="text-yellow-900 text-sm sm:text-base break-words">{children}</div>
    </div>
  );
};

const Lesson8 = () => {
  return (
    <div className="w-full max-w-4xl mx-auto px-2 sm:px-4 lg:px-6 overflow-x-hidden">
      <header className="mb-6 sm:mb-8">
        <h1 className="text-2xl sm:text-3xl lg:text-4xl font-bold text-gray-800 mb-3 sm:mb-4 leading-tight">Le√ßon 8: API Fetch (requ√™tes HTTP, gestion des r√©ponses)</h1>
        <div className="bg-gradient-to-r from-yellow-100 to-yellow-50 p-4 sm:p-6 rounded-lg border-l-4 border-yellow-500">
          <h3 className="text-lg sm:text-xl font-semibold text-yellow-800 mb-2">Objectif</h3>
          <p className="text-yellow-700 text-sm sm:text-base leading-relaxed">Apprendre √† effectuer des requ√™tes HTTP avec l'API Fetch, g√©rer les r√©ponses et les erreurs, et comprendre les diff√©rentes options disponibles.</p>
        </div>
      </header>

      <main className="space-y-6 sm:space-y-8">
        <section className="bg-white p-4 sm:p-6 rounded-lg shadow-sm" id="1-introduction-a-fetch">
          <h2 className="text-xl sm:text-2xl font-bold text-gray-800 mb-3 sm:mb-4">1. Introduction √† l'API Fetch</h2>
          <p className="text-gray-600 mb-3 sm:mb-4 text-sm sm:text-base">L'API Fetch est une interface moderne pour effectuer des requ√™tes HTTP dans le navigateur, rempla√ßant XMLHttpRequest.</p>
          
          <h4 className="text-base sm:text-lg font-semibold text-gray-700 mb-2">Fonctionnalit√©s principales :</h4>
          <ul className="list-disc list-inside text-gray-600 text-sm sm:text-base space-y-1 mb-3 sm:mb-4">
            <li>Bas√©e sur les Promesses (Promise-based)</li>
            <li>Retourne une Promesse r√©solvant en r√©ponse</li>
            <li>Supporte toutes les m√©thodes HTTP (GET, POST, PUT, DELETE, etc.)</li>
            <li>Peut traiter diff√©rentes donn√©es (JSON, texte, blob, etc.)</li>
          </ul>
          
          <h4 className="text-base sm:text-lg font-semibold text-gray-700 mb-2">Syntaxe de base :</h4>
          <CodeBlock language="javascript">
{`// Syntaxe simple pour une requ√™te GET
fetch('https://jsonplaceholder.typicode.com/posts/1')
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error('Erreur :', error));

// Syntaxe avec options (m√©thode POST)
fetch('https://jsonplaceholder.typicode.com/posts', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Authorization': 'Bearer votre-token'
  },
  body: JSON.stringify({
    title: 'Mon nouveau post',
    body: 'Contenu du post',
    userId: 1
  })
})
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error('Erreur :', error));`}
          </CodeBlock>
        </section>

        <section className="bg-white p-4 sm:p-6 rounded-lg shadow-sm" id="2-requetes-get">
          <h2 className="text-xl sm:text-2xl font-bold text-gray-800 mb-3 sm:mb-4">2. Requ√™tes GET</h2>
          <p className="text-gray-600 mb-3 sm:mb-4 text-sm sm:text-base">La m√©thode GET est la plus courante, utilis√©e pour r√©cup√©rer des donn√©es.</p>
          
          <h4 className="text-base sm:text-lg font-semibold text-gray-700 mb-2">GET simple :</h4>
          <CodeBlock language="javascript">
{`// R√©cup√©rer des donn√©es
fetch('https://jsonplaceholder.typicode.com/posts')
  .then(response => response.json())
  .then(posts => {
    console.log('Posts r√©cup√©r√©s :', posts);
  })
  .catch(error => {
    console.error('Erreur de r√©cup√©ration :', error);
  });`}
          </CodeBlock>

          <h4 className="text-base sm:text-lg font-semibold text-gray-700 mb-2">GET avec param√®tres de requ√™te :</h4>
          <CodeBlock language="javascript">
{`// Construire une URL avec des param√®tres
const userId = 1;
const url = new URL('https://jsonplaceholder.typicode.com/posts');
url.searchParams.append('userId', userId);

fetch(url)
  .then(response => response.json())
  .then(posts => {
    console.log('Posts de l\'utilisateur :', posts);
  })
  .catch(error => {
    console.error('Erreur :', error);
  });

// Ou directement dans l'URL
fetch('https://jsonplaceholder.typicode.com/posts?userId=1')
  .then(response => response.json())
  .then(posts => {
    console.log('Posts de l\'utilisateur :', posts);
  });`}
          </CodeBlock>

          <h4 className="text-base sm:text-lg font-semibold text-gray-700 mb-2">GET avec options (headers, etc.) :</h4>
          <CodeBlock language="javascript">
{`fetch('https://jsonplaceholder.typicode.com/posts/1', {
  method: 'GET',
  headers: {
    'Content-Type': 'application/json',
    'Authorization': 'Bearer votre-token-ici'
  }
})
  .then(response => {
    if (!response.ok) {
      throw new Error('Erreur HTTP: ' + response.status);
    }
    return response.json();
  })
  .then(data => {
    console.log('Donn√©es r√©cup√©r√©es :', data);
  })
  .catch(error => {
    console.error('Erreur :', error.message);
  });`}
          </CodeBlock>
        </section>

        <section className="bg-white p-4 sm:p-6 rounded-lg shadow-sm" id="3-requetes-post-put-delete">
          <h2 className="text-xl sm:text-2xl font-bold text-gray-800 mb-3 sm:mb-4">3. Requ√™tes POST, PUT, DELETE</h2>
          
          <h4 className="text-base sm:text-lg font-semibold text-gray-700 mb-2">POST - Cr√©er une ressource :</h4>
          <CodeBlock language="javascript">
{`const nouveauPost = {
  title: 'Mon nouveau post',
  body: 'Contenu de mon post',
  userId: 1
};

fetch('https://jsonplaceholder.typicode.com/posts', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify(nouveauPost)
})
  .then(response => response.json())
  .then(data => {
    console.log('Nouveau post cr√©√© :', data);
  })
  .catch(error => {
    console.error('Erreur lors de la cr√©ation :', error);
  });`}
          </CodeBlock>

          <h4 className="text-base sm:text-lg font-semibold text-gray-700 mb-2">PUT - Mettre √† jour une ressource :</h4>
          <CodeBlock language="javascript">
{`const postModifie = {
  id: 1,
  title: 'Titre mis √† jour',
  body: 'Contenu mis √† jour',
  userId: 1
};

fetch('https://jsonplaceholder.typicode.com/posts/1', {
  method: 'PUT',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify(postModifie)
})
  .then(response => response.json())
  .then(data => {
    console.log('Post mis √† jour :', data);
  })
  .catch(error => {
    console.error('Erreur lors de la mise √† jour :', error);
  });`}
          </CodeBlock>

          <h4 className="text-base sm:text-lg font-semibold text-gray-700 mb-2">DELETE - Supprimer une ressource :</h4>
          <CodeBlock language="javascript">
{`fetch('https://jsonplaceholder.typicode.com/posts/1', {
  method: 'DELETE'
})
  .then(response => {
    if (response.ok) {
      console.log('Post supprim√© avec succ√®s');
    } else {
      throw new Error('Erreur lors de la suppression');
    }
  })
  .catch(error => {
    console.error('Erreur :', error);
  });`}
          </CodeBlock>
        </section>

        <section className="bg-white p-4 sm:p-6 rounded-lg shadow-sm" id="4-gestion-des-reponses">
          <h2 className="text-xl sm:text-2xl font-bold text-gray-800 mb-3 sm:mb-4">4. Gestion des r√©ponses</h2>
          <p className="text-gray-600 mb-3 sm:mb-4 text-sm sm:text-base">L'objet Response contient de nombreuses propri√©t√©s utiles pour analyser la r√©ponse.</p>
          
          <h4 className="text-base sm:text-lg font-semibold text-gray-700 mb-2">Propri√©t√©s de l'objet Response :</h4>
          <CodeBlock language="javascript">
{`fetch('https://jsonplaceholder.typicode.com/posts/1')
  .then(response => {
    console.log('Statut :', response.status);           // 200, 404, 500, etc.
    console.log('OK ?', response.ok);                    // true si statut entre 200-299
    console.log('URL :', response.url);                  // URL compl√®te de la requ√™te
    console.log('Headers :', response.headers);          // En-t√™tes de r√©ponse
    console.log('Type :', response.type);                // basic, cors, error, opaque, etc.
    
    // V√©rifier si la requ√™te a r√©ussi
    if (!response.ok) {
      throw new Error('Erreur HTTP: ' + response.status);
    }
    
    return response.json();  // Parse le JSON
  })
  .then(data => {
    console.log('Donn√©es :', data);
  })
  .catch(error => {
    console.error('Erreur :', error.message);
  });`}
          </CodeBlock>

          <h4 className="text-base sm:text-lg font-semibold text-gray-700 mb-2">M√©thodes pour lire le corps de la r√©ponse :</h4>
          <div className="overflow-x-auto -mx-4 sm:mx-0">
            <table className="min-w-full bg-white border border-gray-200 rounded-lg">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">M√©thode</th>
                  <th className="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                  <th className="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Retourne</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                <tr>
                  <td className="px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-xs sm:text-sm font-mono font-semibold text-blue-600">.json()</td>
                  <td className="px-3 sm:px-6 py-3 sm:py-4 text-xs sm:text-sm text-gray-900">Parse le corps comme JSON</td>
                  <td className="px-3 sm:px-6 py-3 sm:py-4 text-xs sm:text-sm text-gray-500">Promesse r√©solvant en objet/array JSON</td>
                </tr>
                <tr>
                  <td className="px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-xs sm:text-sm font-mono font-semibold text-blue-600">.text()</td>
                  <td className="px-3 sm:px-6 py-3 sm:py-4 text-xs sm:text-sm text-gray-900">R√©cup√®re le corps comme texte</td>
                  <td className="px-3 sm:px-6 py-3 sm:py-4 text-xs sm:text-sm text-gray-500">Promesse r√©solvant en cha√Æne de caract√®res</td>
                </tr>
                <tr>
                  <td className="px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-xs sm:text-sm font-mono font-semibold text-blue-600">.blob()</td>
                  <td className="px-3 sm:px-6 py-3 sm:py-4 text-xs sm:text-sm text-gray-900">R√©cup√®re le corps comme objet Blob</td>
                  <td className="px-3 sm:px-6 py-3 sm:py-4 text-xs sm:text-sm text-gray-500">Promesse r√©solvant en objet Blob</td>
                </tr>
                <tr>
                  <td className="px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-xs sm:text-sm font-mono font-semibold text-blue-600">.arrayBuffer()</td>
                  <td className="px-3 sm:px-6 py-3 sm:py-4 text-xs sm:text-sm text-gray-900">R√©cup√®re le corps comme ArrayBuffer</td>
                  <td className="px-3 sm:px-6 py-3 sm:py-4 text-xs sm:text-sm text-gray-500">Promesse r√©solvant en ArrayBuffer</td>
                </tr>
              </tbody>
            </table>
          </div>
        </section>

        <section className="bg-white p-4 sm:p-6 rounded-lg shadow-sm" id="5-gestion-des-erreurs">
          <h2 className="text-xl sm:text-2xl font-bold text-gray-800 mb-3 sm:mb-4">5. Gestion des erreurs</h2>
          <p className="text-gray-600 mb-3 sm:mb-4 text-sm sm:text-base">Il est essentiel de g√©rer les erreurs correctement pour une exp√©rience utilisateur robuste.</p>
          
          <h4 className="text-base sm:text-lg font-semibold text-gray-700 mb-2">Erreurs r√©seau vs erreurs HTTP :</h4>
          <CodeBlock language="javascript">
{`fetch('https://api-exemple.com/donnees')
  .then(response => {
    // Les erreurs r√©seau (serveur injoignable, etc.) vont dans .catch()
    // Les erreurs HTTP (404, 500, etc.) sont des r√©ponses valides et restent dans .then()
    
    if (!response.ok) {
      // Gestion des erreurs HTTP
      throw new Error('Erreur HTTP: ' + response.status + ' - ' + response.statusText);
    }
    
    return response.json();
  })
  .then(data => {
    console.log('Donn√©es re√ßues :', data);
  })
  .catch(error => {
    // Erreurs r√©seau ou erreurs HTTP captur√©es avec throw
    console.error('Erreur de requ√™te :', error.message);
    
    // Gestion d'erreurs sp√©cifiques
    if (error.message.includes('404')) {
      console.log('Ressource non trouv√©e');
    } else if (error.message.includes('500')) {
      console.log('Erreur serveur interne');
    } else {
      console.log('Autre erreur r√©seau');
    }
  });`}
          </CodeBlock>

          <h4 className="text-base sm:text-lg font-semibold text-gray-700 mb-2">Exemple de fonction de requ√™te avec gestion d'erreurs compl√®te :</h4>
          <CodeBlock language="javascript">
{`async function faireRequete(url, options = {}) {
  try {
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      },
      ...options
    });

    // V√©rifier si la r√©ponse est OK
    if (!response.ok) {
      throw new Error(\`Erreur HTTP: \${response.status} - \${response.statusText}\`);
    }

    // D√©terminer le type de contenu pour le parser correctement
    const contentType = response.headers.get('content-type');
    if (contentType && contentType.includes('application/json')) {
      return await response.json();
    } else {
      return await response.text();
    }
  } catch (error) {
    // Erreurs r√©seau ou autres erreurs
    console.error('Erreur de requ√™te :', error);
    throw error; // Relancer pour que l'appelant puisse g√©rer
  }
}

// Utilisation
async function recupererUtilisateur(id) {
  try {
    const utilisateur = await faireRequete(\`https://jsonplaceholder.typicode.com/users/\${id}\`);
    console.log('Utilisateur :', utilisateur);
    return utilisateur;
  } catch (error) {
    console.error('Impossible de r√©cup√©rer l\'utilisateur :', error.message);
    // Retourner une valeur par d√©faut ou g√©rer l'erreur
    return null;
  }
}`}
          </CodeBlock>
        </section>

        <section className="bg-white p-4 sm:p-6 rounded-lg shadow-sm" id="6-traitement-des-differentes-types-de-reponses">
          <h2 className="text-xl sm:text-2xl font-bold text-gray-800 mb-3 sm:mb-4">6. Traitement des diff√©rents types de r√©ponses</h2>
          
          <h4 className="text-base sm:text-lg font-semibold text-gray-700 mb-2">Traitement de JSON :</h4>
          <CodeBlock language="javascript">
{`fetch('https://jsonplaceholder.typicode.com/posts/1')
  .then(response => response.json())
  .then(data => {
    console.log('Donn√©es JSON :', data);
    console.log('Titre :', data.title);
    console.log('Auteur :', data.userId);
  });`}
          </CodeBlock>

          <h4 className="text-base sm:text-lg font-semibold text-gray-700 mb-2">Traitement de texte :</h4>
          <CodeBlock language="javascript">
{`fetch('https://exemple.com/fichier.txt')
  .then(response => response.text())
  .then(texte => {
    console.log('Contenu du fichier :', texte);
  });`}
          </CodeBlock>

          <h4 className="text-base sm:text-lg font-semibold text-gray-700 mb-2">Traitement d'images/binaires :</h4>
          <CodeBlock language="javascript">
{`fetch('https://exemple.com/image.jpg')
  .then(response => response.blob())
  .then(blob => {
    // Cr√©er une URL pour l'image
    const imageUrl = URL.createObjectURL(blob);
    
    // Afficher l'image
    const img = document.createElement('img');
    img.src = imageUrl;
    document.body.appendChild(img);
  });`}
          </CodeBlock>
        </section>

        <section className="bg-white p-4 sm:p-6 rounded-lg shadow-sm" id="7-headers-et-authentification">
          <h2 className="text-xl sm:text-2xl font-bold text-gray-800 mb-3 sm:mb-4">7. Headers et authentification</h2>
          <p className="text-gray-600 mb-3 sm:mb-4 text-sm sm:text-base">Les headers permettent de sp√©cifier le type de contenu, l'authentification et d'autres m√©tadonn√©es.</p>
          
          <h4 className="text-base sm:text-lg font-semibold text-gray-700 mb-2">Headers communs :</h4>
          <CodeBlock language="javascript">
{`// En-t√™tes pour une requ√™te avec authentification
const options = {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',       // Indique que le corps est du JSON
    'Accept': 'application/json',             // Attend une r√©ponse JSON
    'Authorization': 'Bearer votre-jeton-ici', // Jeton d'authentification
    'X-API-Key': 'votre-cle-api'             // Cl√© API si requise
  },
  body: JSON.stringify({
    nom: 'Nouvel utilisateur',
    email: 'email@example.com'
  })
};

fetch('https://api-exemple.com/utilisateurs', options)
  .then(response => response.json())
  .then(data => console.log(data));`}
          </CodeBlock>

          <h4 className="text-base sm:text-lg font-semibold text-gray-700 mb-2">Gestion de l'authentification avec jeton :</h4>
          <CodeBlock language="javascript">
{`class ApiClient {
  constructor(baseUrl, token = null) {
    this.baseUrl = baseUrl;
    this.token = token;
  }
  
  setToken(token) {
    this.token = token;
  }
  
  async requete(chemin, options = {}) {
    const headers = {
      'Content-Type': 'application/json',
      ...options.headers
    };
    
    if (this.token) {
      headers['Authorization'] = 'Bearer ' + this.token;
    }
    
    const response = await fetch(this.baseUrl + chemin, {
      ...options,
      headers
    });
    
    if (!response.ok) {
      throw new Error('Erreur API: ' + response.status);
    }
    
    return await response.json();
  }
  
  async get(chemin) {
    return this.requete(chemin);
  }
  
  async post(chemin, data) {
    return this.requete(chemin, {
      method: 'POST',
      body: JSON.stringify(data)
    });
  }
}

// Utilisation
const api = new ApiClient('https://api-exemple.com');
api.setToken('votre-jeton-d-authentification');
const resultats = await api.get('/utilisateurs');`}
          </CodeBlock>
        </section>

        <section className="bg-white p-4 sm:p-6 rounded-lg shadow-sm" id="8-exemple-complet">
          <h2 className="text-xl sm:text-2xl font-bold text-gray-800 mb-3 sm:mb-4">8. Exemple complet</h2>
          <p className="text-gray-600 mb-3 sm:mb-4 text-sm sm:text-base">Voici un exemple complet d'une application qui effectue diff√©rentes op√©rations CRUD avec l'API Fetch :</p>
          
          <CodeBlock language="javascript">
{`class GestionnaireAPI {
  constructor(baseURL) {
    this.baseURL = baseURL;
  }
  
  // GET - R√©cup√©rer tous les √©l√©ments
  async getAll(chemin) {
    try {
      const response = await fetch(\`\${this.baseURL}/\${chemin}\`);
      if (!response.ok) {
        throw new Error('Erreur de r√©cup√©ration: ' + response.status);
      }
      return await response.json();
    } catch (error) {
      console.error('Erreur GET:', error);
      throw error;
    }
  }
  
  // GET - R√©cup√©rer un √©l√©ment sp√©cifique
  async getById(chemin, id) {
    try {
      const response = await fetch(\`\${this.baseURL}/\${chemin}/\${id}\`);
      if (!response.ok) {
        throw new Error('Erreur de r√©cup√©ration: ' + response.status);
      }
      return await response.json();
    } catch (error) {
      console.error('Erreur GET by ID:', error);
      throw error;
    }
  }
  
  // POST - Cr√©er un nouvel √©l√©ment
  async create(chemin, donnees) {
    try {
      const response = await fetch(\`\${this.baseURL}/\${chemin}\`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(donnees)
      });
      
      if (!response.ok) {
        throw new Error('Erreur de cr√©ation: ' + response.status);
      }
      
      return await response.json();
    } catch (error) {
      console.error('Erreur POST:', error);
      throw error;
    }
  }
  
  // PUT - Mettre √† jour un √©l√©ment
  async update(chemin, id, donnees) {
    try {
      const response = await fetch(\`\${this.baseURL}/\${chemin}/\${id}\`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(donnees)
      });
      
      if (!response.ok) {
        throw new Error('Erreur de mise √† jour: ' + response.status);
      }
      
      return await response.json();
    } catch (error) {
      console.error('Erreur PUT:', error);
      throw error;
    }
  }
  
  // DELETE - Supprimer un √©l√©ment
  async delete(chemin, id) {
    try {
      const response = await fetch(\`\${this.baseURL}/\${chemin}/\${id}\`, {
        method: 'DELETE'
      });
      
      if (!response.ok) {
        throw new Error('Erreur de suppression: ' + response.status);
      }
      
      return true;
    } catch (error) {
      console.error('Erreur DELETE:', error);
      throw error;
    }
  }
}

// Utilisation
const api = new GestionnaireAPI('https://jsonplaceholder.typicode.com');

// Utilisation avec async/await
async function exempleUtilisation() {
  try {
    // R√©cup√©rer tous les posts
    console.log('R√©cup√©ration des posts...');
    const posts = await api.getAll('posts');
    console.log('Nombre de posts :', posts.length);
    
    // Cr√©er un nouveau post
    console.log('Cr√©ation d\'un nouveau post...');
    const nouveauPost = await api.create('posts', {
      title: 'Nouveau post via Fetch',
      body: 'Contenu du nouveau post',
      userId: 1
    });
    console.log('Post cr√©√© :', nouveauPost);
    
    // Mettre √† jour le post
    console.log('Mise √† jour du post...');
    const postMisAJour = await api.update('posts', nouveauPost.id, {
      ...nouveauPost,
      title: 'Post mis √† jour'
    });
    console.log('Post mis √† jour :', postMisAJour);
    
    // Supprimer le post
    console.log('Suppression du post...');
    const suppression = await api.delete('posts', nouveauPost.id);
    console.log('Post supprim√© :', suppression);
  } catch (error) {
    console.error('Erreur dans l\'exemple :', error.message);
  }
}

exempleUtilisation();`}
          </CodeBlock>
        </section>

        <ExerciseBox>
          <p className="mb-2 sm:mb-3">Cr√©ez une application qui permet de :</p>
          <ul className="list-disc list-inside text-gray-600 text-sm sm:text-base space-y-1 mb-2 sm:mb-3">
            <li>Afficher une liste d'utilisateurs provenant de l'API JSONPlaceholder</li>
            <li>Ajouter un nouvel utilisateur</li>
            <li>Modifier un utilisateur existant</li>
            <li>Supprimer un utilisateur</li>
          </ul>
          <p className="mb-2 sm:mb-3">Impl√©mentez votre application en utilisant l'API Fetch avec async/await, et assurez-vous de g√©rer correctement les erreurs.</p>
          <p className="mb-2 sm:mb-3">Affichez des messages d'√©tat appropri√©s √† chaque op√©ration (chargement, succ√®s, erreur).</p>
          <p className="mb-2"><strong>‚úÖ R√©sultat attendu :</strong></p>
          <pre className="bg-gray-100 p-2 sm:p-3 rounded text-xs sm:text-sm overflow-x-auto whitespace-pre-wrap break-words">
{`// Affiche "Chargement des utilisateurs..." puis la liste
// Lors de l'ajout : "Utilisateur ajout√© avec succ√®s" 
// Lors de la modification : "Utilisateur mis √† jour"
// Lors de la suppression : "Utilisateur supprim√©"
// En cas d'erreur : "Erreur : [message d'erreur]"`}
          </pre>
        </ExerciseBox>
      </main>
    </div>
  );
};

export default Lesson8;